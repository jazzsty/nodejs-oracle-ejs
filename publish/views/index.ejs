<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('./includes/head'); %>
    <!-- <script src="/js/page/index.js"></script> -->
</head>

<body>
    <header>
        <%- include('./includes/header'); %>
    </header>
    <div class='container'>
        <!-- <div class='card w-100'> -->

            <div id="measurementStations">
                <!-- 체크박스와 리스트가 JavaScript를 통해 여기에 추가됩니다 -->
            </div>

        <!-- </div> -->
    </div>
    <footer>
        <%- include('./includes/footer'); %>
    </footer>

    <script src="/js/page/footer.js"></script>
    <!-- <script>
        const createCheckboxes = (start, end, checkedUntil) => {
            const container = document.getElementById("measurementStations");

            // 측정소 리스트 추가
            for (let i = start; i <= end; i++) {
                const listItem = document.createElement("div");
                listItem.classList.add("list-group-item", "d-flex", "align-items-center", "gap-2");
                listItem.style.paddingLeft = "50px";

                const checkbox = document.createElement("input");
                checkbox.type = "checkbox";
                checkbox.classList.add("form-check-input", "me-3", "ms-2");
                checkbox.id = `check-${i}`;
                checkbox.name = "check";
                checkbox.value = i;
                checkbox.checked = i <= checkedUntil;
                checkbox.style.width = "15px";
                checkbox.style.height = "15px";
               
                const idInput = document.createElement("input");
                idInput.type = "text";
                idInput.classList.add("form-control", "me-3", "text-center");
                idInput.value = i;
                idInput.readOnly = true;
                idInput.style.width = "50px"; // ID 필드 크기 지정
                idInput.style.marginLeft = "4px";

                const latInput = document.createElement("input");
                latInput.type = "text";
                latInput.classList.add("form-control", "text-center");
                latInput.placeholder = "위도 입력";

                const lonInput = document.createElement("input");
                lonInput.type = "text";
                lonInput.classList.add("form-control", "me-3", "text-center");
                lonInput.placeholder = "경도 입력";

                // 각 입력 박스 사이에 10px 간격 추가
                idInput.style.marginRight = "10px";
                latInput.style.marginRight = "10px";
                lonInput.style.marginRight = "10px";

                listItem.appendChild(checkbox); // 체크박스가 뒤로 이동
                listItem.appendChild(idInput); // ID 입력 박스가 체크박스 앞에 오도록 변경
                listItem.appendChild(latInput);
                listItem.appendChild(lonInput);
                container.appendChild(listItem);
            }

            const rightButtonDiv = document.createElement("div");
            rightButtonDiv.classList.add("d-flex", "justify-content-end", "gap-2", "mt-2");
            
            const saveButton = document.createElement("button");
            saveButton.classList.add("btn", "btn-secondary", "me-2");
            saveButton.textContent = "저장";
            saveButton.style.marginRight = "0px";

            rightButtonDiv.appendChild(saveButton);
            container.appendChild(rightButtonDiv);
        };

        // 체크박스를 1~35까지 생성하되, 1~29는 선택된 상태로 표시
        createCheckboxes(1, 1, 1);
    </script> -->

    <script>
    // 서버에 측정소 데이터를 저장하는 함수
    async function saveMeasurementStations() {
        const checkboxes = document.querySelectorAll('input[name="check"]:checked');
        const stations = []; // noises 배열 초기화

        // 체크된 각 체크박스에 대해 데이터를 noises 배열에 추가
        checkboxes.forEach(checkbox => {
            const row = checkbox.closest('.list-group-item');
            const inputs = row.querySelectorAll('input[type="text"]');  // 모든 text input 요소들 선택

            if (inputs.length >= 3) {  // 최소 3개의 text input이 있는지 확인
                const seq = inputs[0].value;          // 첫 번째 text input
                const latitude = inputs[1].value;    // 두 번째 text input
                const longitude = inputs[2].value;   // 세 번째 text input
          
                console.log('saveStations() seq: ' + seq);
                console.log('saveStations() latitude: ' + latitude);
                console.log('saveStations() longitude: ' + longitude);
                if (!isNaN(latitude) && !isNaN(longitude)) {
                    stations.push({ seq, latitude, longitude });
                } else {
                    console.warn("유효한 위도 및 경도를 입력하세요.");
                }
            } else {
                console.warn("입력 필드가 충분하지 않습니다.");
            }
        });
        console.log('saveStations() stations: '+ JSON.stringify(stations));
        try {
            const response = await fetch('/save-stations', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(stations)
            });

            // const text = await response.text(); // 응답을 먼저 텍스트 형식으로 확인
            // console.log('서버 응답:', text);

            if (response.ok) {
                // const data = JSON.parse(text); // JSON 파싱 시도
                // alert("데이터가 성공적으로 저장되었습니다.");
                // console.log(data);
                const data = await response.json();
                alert(data.message); // "성공적으로 저장" 메시지 표시
                console.log("변경된 행 수:", data.affectedRows);
            } else {
                throw new Error(`데이터 저장 실패: ${response.status}`);
            }
        } catch (error) {
            alert(">> 오류 발생: " + error.message);
        }
        
    };

    // 프론트엔드 JavaScript 파일에 추가
    // async function loadMeasurementStations() {
    //     try {
    //         const response = await fetch('/load-stations');
    //         if (!response.ok) {
    //             throw new Error('Failed to load measurement stations');
    //         }
    //         const data = await response.json();
    //         console.log(data);
    //         // 여기서 데이터를 화면에 표시하는 로직 추가
    //     } catch (error) {
    //         console.error('Error loading measurement stations:', error);
    //     }
    // }


    async function loadMeasurementStations() {
        try {
            const response = await fetch('/load-stations');
            if (!response.ok) throw new Error('측정소 데이터를 불러오는데 실패했습니다.');

            const stations = await response.json();
            console.log('stations: ' + JSON.stringify(stations));


            const container = document.getElementById("measurementStations");
            container.innerHTML = '';

            stations.forEach(station => {
                const listItem = document.createElement("div");
                listItem.classList.add("list-group-item", "d-flex", "align-items-center", "gap-2");

                const checkbox = document.createElement("input");
                checkbox.type = "checkbox";
                checkbox.classList.add("form-check-input", "me-3");
                checkbox.name = "check";
                checkbox.value = station.seq;

                const idInput = document.createElement("input");
                idInput.type = "text";
                idInput.classList.add("form-control", "text-center");
                idInput.value = station.seq;
                idInput.readOnly = true;

                const latInput = document.createElement("input");
                latInput.type = "text";
                latInput.classList.add("form-control", "text-center");
                latInput.value = station.latitude;

                const lonInput = document.createElement("input");
                lonInput.type = "text";
                lonInput.classList.add("form-control", "text-center");
                lonInput.value = station.longitude;

                listItem.appendChild(idInput);
                listItem.appendChild(checkbox);
                listItem.appendChild(latInput);
                listItem.appendChild(lonInput);

                container.appendChild(listItem);
            });
        } catch (error) {
            console.error(error);
            alert("측정소 데이터를 불러오는 중 오류가 발생했습니다.");
        }
    }

    // DOMContentLoaded 이벤트를 활용해 HTML이 완전히 로드된 후에 코드를 실행하도록 설정
    document.addEventListener("DOMContentLoaded", () => {
        
        // 페이지 로드 시 측정소 데이터 로드
        loadMeasurementStations();

        // 버튼에 이벤트 리스너 추가
        // const addButton = document.querySelector("button.btn-primary");
        // const deleteButton = document.querySelector("button.btn-danger");
        const saveButton = document.querySelector("button.btn-secondary");

        // if (addButton) addButton.addEventListener("click", addRow);
        // if (deleteButton) deleteButton.addEventListener("click", deleteRow);
        if (saveButton) saveButton.addEventListener("click", saveMeasurementStations);
        
    });
    </script>
</body>

</html>
