<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('./includes/head'); %>
    <!-- <script src="/js/page/index.js"></script> -->
</head>

<body>
    <header>
        <%- include('./includes/header'); %>
    </header>
    <div class='container'>
        <div class='card w-100'>
            <div class='card-header'>
                인천공항 소음측정 클라이언트
            </div>
            <div class='card-body'>
                <table class="table text-center">
                    <colgroup>
                        <col style="width: 33%;" />
                        <col style="width: 34%;" />
                        <col style="width: 33%;" />
                    </colgroup>
                    <tbody id="noiseForm">
                        <tr>
                            <th class="align-middle">호스트(Host)</th>
                            <td colspan="2">
                                <input type="text" id="host" name="host" class="form-control" placeholder="58.225.62.172" value="58.225.62.172" />
                            </td>
                        </tr>
                        <tr>
                            <th class="align-middle">포트(Port)</th>
                            <td colspan="2">
                                <input type="text" id="port" name="port" class="form-control" placeholder="8080" value="8443" />
                            </td>
                        </tr>
                        <tr>
                            <th class="align-middle">사이트(Site)</th>
                            <td colspan="2">
                                <input type="text" id="site" name="site" class="form-control" placeholder="ICN" value="ICN" />
                            </td>
                        </tr>
                        <tr>
                            <th class="align-middle">측정소</th>
                            <td colspan="2">
                                <div id="measurementStations" class="list-group">
                                    <!-- 체크박스와 리스트가 JavaScript를 통해 여기에 추가됩니다 -->
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class='card w-100' style="height: 488px;">
            <div class='card-header'>
                인천공항 소음측정 결과
            </div>
            <div class="d-flex justify-content-center mt-2" style="padding-top: 15px;">
                <button type="button" id="startBtn" class="btn btn-lg btn-info" style="margin-right: 10px; width: 200px;">소음측정 시작</button>
                <button type="button" id="stopBtn" class="btn btn-lg btn-info" style="margin-right: 10px; width: 200px;" disabled>소음측정 중지</button>
                <button type="button" id="resultStartBtn" class="btn btn-lg btn-info" style="margin-right: 10px; width: 200px;">결과보기</button>
                <button type="button" id="resultStopBtn" class="btn btn-lg btn-info" style="display: none; width: 200px;">결과보기 중지</button>
            </div>
            <div class='card-body'>
                <table class="table text-center">
                    <colgroup>
                        <col style="width: 33%;" />
                        <col />
                    </colgroup>
                    <tbody style="border-bottom-width: -56px;">
                        <tr>
                            <th>에러 메시지</th>
                            <td id="resultError"></td>
                        </tr>
                        <tr>
                            <th>실행횟수</th>
                            <td id="resultAll">0</td>
                        </tr>
                        <tr>
                            <th>성공횟수</th>
                            <td id="resultSuccess">0</td>
                        </tr>
                        <tr>
                            <th>실패횟수</th>
                            <td id="resultFail">0</td>
                        </tr>
                        <tr>
                            <th>예외횟수</th>
                            <td id="resultIgnore">0</td>
                        </tr>
                        <tr>
                            <th>측정값 음수</th>
                            <td id="resultMinus">0</td>
                        </tr>
                        <tr>
                            <th>측정값 초과</th>
                            <td id="resultOver">0</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <footer>
        <%- include('./includes/footer'); %>
    </footer>

    <script src="/js/page/footer.js"></script>
    <script>
        const createCheckboxes = (start, end, checkedUntil) => {
            const container = document.getElementById("measurementStations");

            // 전체 선택/해제 체크박스 추가
            const selectAllDiv = document.createElement("div");
            selectAllDiv.classList.add("list-group-item", "d-flex", "align-items-center");
            selectAllDiv.style.borderLeftWidth = "1px";
            selectAllDiv.style.paddingLeft = "30px";
            selectAllDiv.style.borderBottom = "none";
            // selectAllDiv 스타일 조정
            selectAllDiv.style.paddingTop = "5px"; // 기존의 절반
            selectAllDiv.style.paddingBottom = "5px"; // 기존의 절반

            const selectAllCheckbox = document.createElement("input");
            selectAllCheckbox.type = "checkbox";
            selectAllCheckbox.classList.add("form-check-input", "me-3", "ms-2");
            selectAllCheckbox.id = "selectAll";
            selectAllCheckbox.onclick = toggleAllCheckboxes;
            selectAllCheckbox.style.width = "15px";
            selectAllCheckbox.style.height = "15px";

            const selectAllLabel = document.createElement("label");
            selectAllLabel.classList.add("form-check-label", "mb-0");
            selectAllLabel.setAttribute("for", "selectAll");
            selectAllLabel.textContent = "전체 선택/해제";
            selectAllLabel.style.paddingLeft = "8px";

            selectAllDiv.appendChild(selectAllCheckbox);
            selectAllDiv.appendChild(selectAllLabel);
            container.appendChild(selectAllDiv);

            // 타이틀 행 추가
            const titleRow = document.createElement("div");
            titleRow.classList.add("list-group-item", "d-flex", "align-items-center", "fw-bold", "text-center");
            titleRow.style.borderTop = "none";
            titleRow.style.borderBottom = "none";
            // titleRow 스타일 조정
            titleRow.style.paddingTop = "5px"; // 기존의 절반
            titleRow.style.paddingBottom = "5px"; // 기존의 절반

            const titleId = document.createElement("span");
            titleId.classList.add("flex-grow-1", "text-center");
            titleId.style.paddingLeft = "40px";
            titleId.textContent = "ID";

            const titleLat = document.createElement("span");
            titleLat.classList.add("flex-grow-1", "text-center", "ms-3");
            titleLat.style.paddingLeft = "135px";
            titleLat.textContent = "Latitude";

            const titleLon = document.createElement("span");
            titleLon.classList.add("flex-grow-1", "text-center", "ms-3");
            titleLon.style.paddingLeft = "225px";
            titleLon.textContent = "Longitude";

            titleRow.appendChild(titleId);
            titleRow.appendChild(titleLat);
            titleRow.appendChild(titleLon);
            container.appendChild(titleRow);

            // 측정소 리스트 추가
            for (let i = start; i <= end; i++) {
                const listItem = document.createElement("div");
                listItem.classList.add("list-group-item", "d-flex", "align-items-center", "gap-2");
                listItem.style.borderLeftWidth = "1px";
                listItem.style.paddingLeft = "30px";
                listItem.style.borderBottom = "none";
                listItem.style.borderTop = "none";
                // listItem 스타일 조정
                listItem.style.paddingTop = "5px"; // 기존의 절반
                listItem.style.paddingBottom = "5px"; // 기존의 절반

                const checkbox = document.createElement("input");
                checkbox.type = "checkbox";
                checkbox.classList.add("form-check-input", "me-3", "ms-2");
                checkbox.id = `check-${i}`;
                checkbox.name = "check";
                checkbox.value = i;
                checkbox.checked = i <= checkedUntil;
                checkbox.style.width = "15px";
                checkbox.style.height = "15px";
               
                const idInput = document.createElement("input");
                idInput.type = "text";
                idInput.classList.add("form-control", "me-3", "text-center");
                idInput.value = i;
                idInput.readOnly = true;
                idInput.style.width = "50px"; // ID 필드 크기 지정

                const latInput = document.createElement("input");
                latInput.type = "text";
                latInput.classList.add("form-control", "text-center");
                latInput.placeholder = "위도 입력";
                // latInput.value = parseFloat((37.0 + i / 1000000).toFixed(6)); // 예시 값
                // latInput.value = (37.0 + i / 1000000).toFixed(6); // 예시 값

                const lonInput = document.createElement("input");
                lonInput.type = "text";
                lonInput.classList.add("form-control", "me-3", "text-center");
                lonInput.placeholder = "경도 입력";
                // lonInput.value = parseFloat((126.0 + i / 1000000).toFixed(6)); // 예시 값
                // lonInput.value = (126.0 + i / 1000000).toFixed(6); // 예시 값

                // 각 입력 박스 사이에 10px 간격 추가
                idInput.style.marginRight = "10px";
                latInput.style.marginRight = "10px";
                lonInput.style.marginRight = "10px";

                listItem.appendChild(idInput); // ID 입력 박스가 체크박스 앞에 오도록 변경
                listItem.appendChild(checkbox); // 체크박스가 뒤로 이동
                listItem.appendChild(latInput);
                listItem.appendChild(lonInput);
                container.appendChild(listItem);
            }

            // 추가, 수정, 삭제 버튼 추가
            const buttonDiv = document.createElement("div");
            buttonDiv.classList.add("list-group-item", "d-flex", "align-items-center", "gap-2");
            buttonDiv.style.borderTop = "none";

            const addButton = document.createElement("button");
            addButton.classList.add("btn", "btn-primary", "me-2");
            addButton.textContent = "추가";
            addButton.style.marginRight = "10px";
            addButton.style.marginLeft = "19px";

            const deleteButton = document.createElement("button");
            deleteButton.classList.add("btn", "btn-danger");
            deleteButton.textContent = "삭제";

            // 버튼을 ID 입력 박스와 같은 줄에 추가
            buttonDiv.appendChild(addButton);
            buttonDiv.appendChild(deleteButton);
            container.appendChild(buttonDiv);
            
            // 수정, 취소 버튼을 우측에 정렬
            const rightButtonDiv = document.createElement("div");
            rightButtonDiv.classList.add("d-flex", "justify-content-end", "gap-2", "mt-2");
            
            const saveButton = document.createElement("button");
            saveButton.classList.add("btn", "btn-secondary", "me-2");
            saveButton.textContent = "저장";
            saveButton.style.marginRight = "10px";

            const cancelButton = document.createElement("button");
            cancelButton.classList.add("btn", "btn-danger", "me-2");
            cancelButton.textContent = "취소";

            rightButtonDiv.appendChild(saveButton);
            rightButtonDiv.appendChild(cancelButton);
            container.appendChild(rightButtonDiv);
        };

        // 전체 선택/해제 기능
        const toggleAllCheckboxes = () => {
            const selectAll = document.getElementById("selectAll").checked;
            const checkboxes = document.querySelectorAll('input[name="check"]');
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAll;
            });
        };

        // 체크박스를 1~35까지 생성하되, 1~29는 선택된 상태로 표시
        createCheckboxes(1, 35, 29);
    </script>

    <script>
    // 추가 버튼 클릭 시 새로운 행을 추가하는 함수
    const addRow = () => {
        const container = document.getElementById("measurementStations");

        // 모든 list-group-item에서 ID 값을 추출하고, 가장 큰 ID 값을 찾음
        let lastId = 0;
        const rows = container.querySelectorAll('.list-group-item');
        rows.forEach(row => {
            const idInput = row.querySelector('input[type="text"]');
            if (idInput) {
                const currentId = parseInt(idInput.value);
                if (currentId > lastId) {
                    lastId = currentId;
                }
            }
        });

        console.log('lastId: ' + lastId);

        const newId = lastId + 1; // 새로운 ID는 마지막 ID + 1

        const listItem = document.createElement("div");
        listItem.classList.add("list-group-item", "d-flex", "align-items-center", "gap-2");
        listItem.style.borderLeftWidth = "1px";
        listItem.style.paddingLeft = "30px";
        listItem.style.borderBottom = "none";
        listItem.style.borderTop = "none";
        listItem.style.paddingTop = "5px";
        listItem.style.paddingBottom = "5px";

        const checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.classList.add("form-check-input", "me-3", "ms-2");
        checkbox.id = `check-${newId}`;  // 유일한 ID 생성
        checkbox.name = "check";
        checkbox.style.width = "15px";
        checkbox.style.height = "15px";

        const idInput = document.createElement("input");
        idInput.type = "text";
        idInput.classList.add("form-control", "me-3", "text-center");
        idInput.value = newId;  // 새로 생성된 ID
        idInput.readOnly = true;
        idInput.style.width = "50px"; // ID 필드 크기 지정

        const latInput = document.createElement("input");
        latInput.type = "text";
        latInput.classList.add("form-control", "text-center");
        latInput.value = (37.0 + newId / 1000000).toFixed(6); // 예시 값

        const lonInput = document.createElement("input");
        lonInput.type = "text";
        lonInput.classList.add("form-control", "me-3", "text-center");
        lonInput.value = (126.0 + newId / 1000000).toFixed(6); // 예시 값
        
        // 각 입력 박스 사이에 10px 간격 추가
        idInput.style.marginRight = "10px";
        lonInput.style.marginRight = "10px";
        latInput.style.marginRight = "10px";

        listItem.appendChild(idInput);
        listItem.appendChild(checkbox);
        listItem.appendChild(latInput);
        listItem.appendChild(lonInput);

        // 추가 버튼 바로 앞에 새로운 행을 삽입
        const addButton = document.querySelector("button.btn-primary");
        const buttonDiv = addButton.closest('div');  // 버튼이 포함된 div를 찾음
        const parentContainer = buttonDiv.parentNode;  // 버튼이 포함된 div의 부모 요소 (measurementStations)

        // 마지막 행 앞에 새로운 행을 삽입
        parentContainer.insertBefore(listItem, buttonDiv);
    };

    // 삭제 버튼 클릭 시 체크된 항목을 삭제하는 함수
    const deleteRow = () => {
        const checkboxes = document.querySelectorAll('input[name="check"]:checked');
        checkboxes.forEach(checkbox => {
            const row = checkbox.closest('.list-group-item');
            row.remove();
        });
    };

    // 서버에 측정소 데이터를 저장하는 함수
    async function saveMeasurementStations() {
        const checkboxes = document.querySelectorAll('input[name="check"]:checked');
        const stations = []; // noises 배열 초기화

        // 체크된 각 체크박스에 대해 데이터를 noises 배열에 추가
        checkboxes.forEach(checkbox => {
            const row = checkbox.closest('.list-group-item');
            const inputs = row.querySelectorAll('input[type="text"]');  // 모든 text input 요소들 선택

            if (inputs.length >= 3) {  // 최소 3개의 text input이 있는지 확인
                const seq = inputs[0].value;          // 첫 번째 text input
                const latitude = inputs[1].value;    // 두 번째 text input
                const longitude = inputs[2].value;   // 세 번째 text input
          
                console.log('saveStations() seq: ' + seq);
                console.log('saveStations() latitude: ' + latitude);
                console.log('saveStations() longitude: ' + longitude);
                if (!isNaN(latitude) && !isNaN(longitude)) {
                    stations.push({ seq, latitude, longitude });
                } else {
                    console.warn("유효한 위도 및 경도를 입력하세요.");
                }
            } else {
                console.warn("입력 필드가 충분하지 않습니다.");
            }
        });
        console.log('saveStations() stations: '+ JSON.stringify(stations));
        try {
            const response = await fetch('/save-stations', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(stations)
            });

            if (response.ok) {
                // alert("데이터가 성공적으로 저장되었습니다.");
                // const data = await response.json();
                // console.log(data);
                const data = await response.json();
                alert(data.message); // "성공적으로 저장" 메시지 표시
                console.log("변경된 행 수:", data.affectedRows);
            } else {
                throw new Error(`데이터 저장 실패: ${response.status}`);
            }
        } catch (error) {
            alert(">> 오류 발생: " + error.message);
        }

    };

    // 프론트엔드 JavaScript 파일에 추가
    async function loadMeasurementStations() {
        try {
            const response = await fetch('/load-stations');
            if (!response.ok) {
                throw new Error('Failed to load measurement stations');
            }
            const data = await response.json();
            console.log(data);
            // 여기서 데이터를 화면에 표시하는 로직 추가
        } catch (error) {
            console.error('Error loading measurement stations:', error);
        }
    }

    // DOMContentLoaded 이벤트를 활용해 HTML이 완전히 로드된 후에 코드를 실행하도록 설정
    document.addEventListener("DOMContentLoaded", () => {
        
        // 페이지 로드 시 측정소 데이터 로드
        // loadMeasurementStations();

        // 버튼에 이벤트 리스너 추가
        const addButton = document.querySelector("button.btn-primary");
        const deleteButton = document.querySelector("button.btn-danger");
        const saveButton = document.querySelector("button.btn-secondary");

        if (addButton) addButton.addEventListener("click", addRow);
        if (deleteButton) deleteButton.addEventListener("click", deleteRow);
        if (saveButton) saveButton.addEventListener("click", saveMeasurementStations);
        
    });
    </script>
</body>

</html>
